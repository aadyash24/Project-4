#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <algorithm>

using namespace std;

//node structure representing a cell in the grid.
struct Node {
    int row
    int col
    int cost;

    Node(int r, int c, int cost) {
        row = r;
        col = c;
        this->cost = cost;
    }
};

//return true if a's cost is greater than b's cost so that the lowest cost is given highest priority.
struct CompareNode {
    bool operator()(const Node &a, const Node &b) {
        if (a.cost > b.cost) {
            return true;
        } 
        else {
            return false;
        }
    }
};

int main(int argc, char *argv[]) {
    //read the number of tile types and their costs.
    int numTiles;
    cin >> numTiles;
    map<string, int> tileCost;
    for (int i = 0; i < numTiles; i++) {
        string tile;
        int cost;
        cin >> tile >> cost;
        tileCost[tile] = cost;
    }

    //read map dimensions.
    int rows, cols;
    cin >> rows >> cols;

    //read grid to look for each cell's symbol
    vector<vector<string>> grid(rows, vector<string>(cols));
    for (int i = 0; i < rows; i++){
        for (int j = 0; j < cols; j++){
            cin >> grid[i][j];
        }
    }

    //read the runner's starting and ending coordinates.
    int startRow, startCol, endRow, endCol;
    cin >> startRow >> startCol;
    cin >> endRow >> endCol;

    //dijkstras setup

    vector<vector<int>> dist(rows, vector<int>(cols, INF));

    priority_queue<Node, vector<Node>, CompareNode> pq;

    //set the starting cell's distance to 0 since the cost to reach it is zero.
    dist[startRow][startCol] = 0;
    pq.push(Node(startRow, startCol, 0));

    //define arrays for adjacent moves (up, down, left, right).
    int dR[4] = {-1, 1, 0, 0};   //changes in row
    int dC[4] = {0, 0, -1, 1};   //changes in column

    while (!pq.empty()) {
        //node with the smallest accumulated cost.
        Node current = pq.top();
        pq.pop();

        int r = current.row
        int c = current.col
        int currentCost = current.cost;

        //if a shorter path to the node is foung before, skip the iteration
        if (currentCost > dist[r][c]) {
            continue;
        }

        //if destination is reached, break out of loop
        if (r == endRow && c == endCol) {
            break;
        }

        for (int i = 0; i < 4; i++) {
            //calculate neighbor's row and column
            int neighbor = r + dR[i]
            int nc = c + dC[i];

            //ensure neighbor is with in bounds. 
            if (neighbor >= 0 && neighbor < rows && nc >= 0 && nc < cols) {
                //current cost plus the cost of leaving the current cell - this will bet the new cost
                int newCost = currentCost + tileCost[grid[r][c]];

                //if the new cost is lower than the current recorded cost for the neighbor, then
                if (newCost < dist[neighbor][nc]) {
                    //update the neighbor's distance
                    dist[neighbor][nc] = newCost;

                    //set the current cell as the predecessor
                    prev[neighbor][nc] = {r, c};

                    //push neighbor into priority queue
                    pq.push(Node(neighbor, nc, newCost));
                }
            }
        }
    }

    if (dist[endRow][endCol] == INF) {
        cout << "No path found" << endl;
        return 0;
    }

    //store path from the destination back to the start
    vector<pair<int, int>> path;
    
    //start from the destination cell
    int r = endRow
    int c = endCol;
    
    //backtrack using the table until the starting cell is reached
    while (!(r == startRow && c == startCol)) {
        path.push_back({r, c});
        auto p = prev[r][c];
        r = p.first;               
        c = p.second;            
    }

    
    return 0;
}













